@model Assignment
@{
  ViewBag.Title = "Manage Scripts";
  ViewBag.BodyClass = "full";
}

@section Head {
  <script>
    var allFiles = [];
    var activeFile = null;
    var _augerFile = function (fileId,fileName) {
      this.fileId = fileId;
      this.fileName = fileName;
      this.fileType = "javascript";
      this.isLoaded = false;
      this.aceSession = null;
      this.lastSaveText = null;
      this.isDirty = function () {
        if (this.isLoaded) {
          if (this.lastSaveText != this.aceSession.getValue()) {
            return true;
          }
        }
        return false;
      }
    }
  </script>
}

@section Breadcrumbs {
  <li><a href="~/">Auger Home</a>
  <li><a href="~/CourseAdmin">Manage Courses</a>
  <li><a href="~/CourseAdmin/CourseDetails/@Model.CourseId">@Model.Course.CourseLabel</a>
  <li><a href="~/CourseAdmin/AssignmentDetails/@Model.CourseId/@Model.AssignmentId">@Model.AssignmentName</a>
  <li>@ViewBag.Title
}

<div id="ide-container" class="row full-height">
  <div class="ide hidden-xs">
    <div id="folder-pane" class="ide-left-pane collapse in">
      <div class="panel panel-info">
        <div class="panel-heading">
          <div class="btn-group btn-group-xs pull-right" style="margin-top: 6px">
            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              <i class="fa fa-plus"></i> Add <span class="caret"></span>
            </button>
            <ul class="dropdown-menu">
              <li><a id="menu-add-script"><i class="fa fa-file"></i> Script</a>
            </ul>
          </div>
          <h5>Scripts</h5>
        </div>
        <div id="file-list-container" class="panel-body full-height" style="padding:0;">
          <div id="file-list" data-folder="/" class="folder-wrapper ide-file-list list-group full-height-overflow">
            @ShowFolder("Common Scripts", Model.CommonScripts, ViewBag.SelectedScriptId)
            @foreach (var page in Model.Pages)
            {
                @ShowFolder(page.PageName, page.AllScripts, ViewBag.SelectedScriptId)
            }
          </div>
        </div>
      </div>
    </div>

    <div id="right-pane" class="ide-right-pane">
      <div class="ide-horizontal-splitter full-height bg-info hidden-xs">
        <a data-target="#folder-pane"><span class="sr-only">Toggle file list</span></a>
      </div>
      <div class="panel panel-info">
        <div class="panel-heading">
          <div class="btn-group btn-group-xs pull-right" style="margin-top: 6px">
          </div>
          <h5>
            Selected Script: <span id="script-name">N/A</span>
          </h5>
        </div>
        @if (Model.AllScripts.Any())
        {
            <div id="right-pane-body" class="panel-body">
              <div id="toolbar" class="btn-toolbar" style="padding: 5px;">
                <div class="btn-group btn-group-xs">
                  <button id="menu-save" type="button" class="btn btn-primary"><i class="fa fa-save"></i> Save</button>
                  <button type="button" class="btn btn-sm btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">Toggle Dropdown</span>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a id="menu-save-2"><i class="fa fa-file"></i> This File</a>
                    <li><a id="menu-save-all"><i class="fa fa-folder"></i> All Files</a>
                  </ul>
                </div>
                <div class="btn-group btn-group-xs">
                  <button id="menu-indent" class="btn btn-primary" type="button"><i class="fa fa-indent"></i> Indent</button>
                  <button id="menu-outdent" class="btn btn-primary" type="button"><i class="fa fa-outdent"></i> Outdent</button>
                  <button id="menu-format" class="btn btn-primary" type="button"><i class="fa fa-magic"></i> Autoformat</button>
                </div>
                <div class="btn-group btn-group-xs">
                  <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    More <span class="caret"></span>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a>Action</a>
                    <li><a>Another action</a>
                    <li><a>Something else here</a>
                    <li role="separator" class="divider"></li>
                    <li><a id="menu-properties"><i class="fa fa-edit"></i> Properties</a>
                    <li role="separator" class="divider"></li>
                    <li><a id="menu-delete"><i class="fa fa-close"></i> Delete</a>
                  </ul>
                </div>
              </div>
            </div>
            <div class="panel-body panel-info" style="border-top-width:1px;border-top-style:solid;">
              <div id="editor-div" class="full-height">
                <div id="editor"></div>
              </div>
            </div>
        }
        else
        {
            <div class="panel-body full-height"></div>
        }
      </div>
    </div>
  </div>
  <div class="hidden-sm hidden-md hidden-lg">
    <div class="panel panel-danger">
      <div class="panel-heading">Unsupported Device</div>
      <div class="panel-body">
        Sorry. You cannot edit files on this device. Use a desktop PC or a larger mobile device.
      </div>
    </div>
  </div>
</div>

@section Scripts {
@*
<script src="~/Scripts/monaco-editor/min/vs/loader.js"></script>
<script>
  var editor;

  require.config({
    paths: { 'vs': '@Url.Content("~/Scripts/monaco-editor/min/vs")' }
  });
  require(['vs/editor/editor.main'], function() {
    editor = monaco.editor.create(document.getElementById('editor'), {
      value: 'UNABLE TO LOAD SCRIPT SOURCE',
      language: 'javascript',
      theme: 'vs-dark',
      fontSize: 18,
      folding: true,
      readOnly: true,
      formatOnType: true
    });
    editor.addAction({
      id: 'save-action',
      label: 'Save',
      keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S],
      keybindingContext: null,

      // Control if the action should show up in the context menu and where.
      // Built-in groups:
      //   1_goto/* => e.g. 1_goto/1_peekDefinition
      //   2_change/* => e.g. 2_change/2_format
      //   3_edit/* => e.g. 3_edit/1_copy
      //   4_tools/* => e.g. 4_tools/1_commands
      // You can also create your own group.
      // Defaults to null (don't show in context menu).
      //contextMenuGroupId: '2_change/2_bla',
      run: function (ed) {
        console.log("SAVE presssed");
      },
      enablement: {
        writeableEditor: true,
      }
    });
    //editor.onKeyDown(function (e) {
    //  if (e.ctrlKey && e.keyCode === monaco.KeyCode.KEY_S) {
    //    e.preventDefault();
    //  }
    //});
    //editor.onKeyUp(function (e) {
    //  if (e.ctrlKey && e.keyCode === monaco.KeyCode.KEY_S) {
    //    e.preventDefault();
    //  }
    //});
  });
</script>
*@
@Scripts.Render("~/scripts/editor")
@Scripts.Render("~/scripts/ide")
<script>

  var baseSourceHref = '@Url.Action("ScriptSource", new { courseId = Model.CourseId })/';

  ace.require("ace/ext/language_tools");
  var editor = ace.edit("editor");
  ace.require('ace/ext/settings_menu').init(editor);

  editor.setTheme("ace/theme/vibrant_ink");
  //editor.setTheme("ace/theme/terminal");
  //editor.setTheme("ace/theme/tomorrow_night_bright");
  editor.setFontSize(16);
  editor.setReadOnly(true);
  editor.setHighlightActiveLine(true);
  editor.setBehavioursEnabled(true);
  editor.setShowFoldWidgets(false);
  editor.setOptions({
    enableBasicAutocompletion: true,
    enableSnippets: false,
    enableLiveAutocompletion: true
  });

  editor.commands.addCommands([{
    name: "showSettingsMenu",
    bindKey: {win: "Ctrl-q", mac: "Command-q"},
    exec: function(editor) {
      editor.showSettingsMenu();
    },
    readOnly: true
  }]);
  
  editor.commands.addCommand({
    name: 'save',
    bindKey: { win: 'Ctrl-S', mac: 'Command-S' },
    exec: function (editor) {
      _augerSaveFile(activeFile, function (err) {
        if (!!err && err.length > 0) {
          alert(err);
        }
      });
    },
    readOnly: false // false if this command should not apply in readOnly mode
  });

  var _augerResize = function () {
    $('.full-height').each(function () {
      $(this).height($(window).innerHeight() - this.getBoundingClientRect().top);
    });
    if (!!editor) { editor.resize(); }
  };
  $(window).resize(_augerResize);

  var _augerConfirmLeave = function (e) {
    var dirty = false;
    for (var fileId in allFiles) {
      var file = allFiles[fileId];
      dirty = dirty || file.isDirty();
    }
    if (dirty) {
      var message = 'There are unsaved files.';
      e = e || window.event;
      if (e) { e.returnValue = message; }
      return message;
    } else {
      return;
    }
  };
  window.onbeforeunload = function (e) { return _augerConfirmLeave(e); };

  var _augerLoadFile = function (file,callback) {
    var href = baseSourceHref + file.fileId;
    $.get({ url: href, dataType: 'text' })
      .done(function (data) {
        var session = ace.createEditSession(data, "ace/mode/javascript");
        session.on("changeAnnotation", function () { _augerChangeAnnotations(file); });
        session.on("change", function () { _augerUpdateDirty(file); });
        session.setTabSize(2);
        session.setUseSoftTabs(true);
        file.aceSession = session;
        file.isLoaded = true;
        file.lastSaveText = data;
        callback();
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        callback('UNABLE TO LOAD SCRIPT SOURCE\n' + errorThrown);
      });
  };

  var _augerSaveFile = function (file,callback) {
    if (!file.isDirty()) {
      callback();
      return;
    }
    var href = baseSourceHref + file.fileId;
    $.post(href, { source: file.aceSession.getValue() })
      .done(function (data) {
        file.lastSaveText = file.aceSession.getValue();
        _augerUpdateDirty(file);
        callback();
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        callback(errorThrown);
      });
  };

  var _augerChangeAnnotations = function (file) {
    var annot = file.aceSession.getAnnotations();
    for (var i = 0; i < annot.length; i++) {
      // column, raw, row, text, type ('info','error')
      var a = annot[i];
      console.log(annot[i].type + " -- [" + a.row + "," + a.column + "] " + a.text);
    }
    var $button = $('a[data-fileid=' + file.fileId + ']');
    if (annot.length > 0) {
      $button.addClass('warn');
    } else {
      $button.removeClass('warn');
    }
  };

  var _augerUpdateDirty = function (file) {
    var $button = $('a[data-fileid=' + file.fileId + ']');
    if (file.isDirty()) {
      $button.addClass('dirty');
    } else {
      $button.removeClass('dirty');
    }
  };

  $(function () {
    _augerResize();

    $('.ide-horizontal-splitter a').click(function () {
      var $ide = $(this).closest('.ide');
      if ($(this).hasClass('collapsed')) {
        $ide.find('.ide-right-pane').css('width', '99%');
        $ide.find('.ide-right-pane').animate({ width: '80%' }, 250);
        $ide.find('.ide-left-pane').animate({ width: '20%' }, 250);
        $(this).removeClass('collapsed');
      } else {
        $ide.find('.ide-left-pane').animate({ width: '0' }, 250);
        $ide.find('.ide-right-pane').animate({ width: '100%' }, 250);
        $(this).addClass('collapsed');
      }
      setTimeout(function () { $(window).resize(); }, 250);
    });

    function showFile(file,$button) {
      activeFile = file;
      editor.setReadOnly(false);
      editor.setSession(file.aceSession);
      editor.focus();
      $('#script-name').text(file.fileName);
      $button.addClass('list-group-item-success');
      $('#toolbar button').prop('disabled', false);
    }

    function showMessage(text) {
      activeFile = null;
      editor.setReadOnly(true);
      editor.setSession(ace.createEditSession(text,"ace/mode/text"));
      $('#script-name').text('N/A');
      $('#toolbar button').prop('disabled', true);
    }

    $('.file-link').click(function () {
      var $button = $(this);
      var file = allFiles[$button.data('fileid')];
      $('.file-link').removeClass('list-group-item-success');
      if (file.isLoaded) {
        showFile(file,$button);
      } else {
        showMessage("LOADING...");
        _augerLoadFile(file, function (errMsg) {
          if (file.isLoaded) {
            showFile(file,$button);
          } else {
            showMessage(errMsg);
          }
        });
      }
      return false;
    });

    $('#menu-add-script').click(function () {
      window.location.href = '@Url.Content("~/CourseAdmin/ScriptCreate/" + Model.CourseId + "/" + Model.AssignmentId)';
    });

    $('#menu-save,#menu-save-2').click(function () {
      _augerSaveFile(activeFile, function (err) {
        if (!!err && err.length > 0) {
          alert(err);
        }
      });
    });

    $('#menu-save-all').click(function () {
    });

    $('#menu-indent').click(function () {
    });

    $('#menu-outdent').click(function () {
    });

    $('#menu-format').click(function () {
    });

    $('#menu-properties').click(function () {
      window.location.href = '@Url.Content("~/CourseAdmin/ScriptEdit/" + Model.CourseId)/' + activeFile.fileId;
    });

    $('#menu-delete').click(function () {
      window.location.href = '@Url.Content("~/CourseAdmin/ScriptDelete/" + Model.CourseId)/' + activeFile.fileId;
    });

    $('#toolbar button').each(function (i,e) { e.disabled = true; });
    $('#default-script').click();
  });

</script>
}

@helper ShowFolder(string folderName, IEnumerable<Script> scripts, int? selectedScriptId)
{
  var id = Guid.NewGuid().ToString();

  <div class="folder-wrapper">
    <a class="list-group-item folder level-0" data-toggle="collapse" data-target="#@id">
      @folderName
    </a>
    <div class="collapse in" id="@id">
      <div class="btn-group-xs btn-group-vertical">
        @foreach (var script in scripts)
        {
          var buttonId = script.ScriptId == selectedScriptId ? "default-script" : "";
          var scriptClass = script.IsPreGrade ? "pregrade" : "";

            <script>allFiles[@script.ScriptId] = new _augerFile(@script.ScriptId,'@script.ScriptName');</script>
            <a data-fileid="@script.ScriptId" id="@buttonId" class="list-group-item file file-other level-0 file-link @scriptClass">
              @script.ScriptName
            </a>
        }
      </div>
    </div>
  </div>
}
